// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_UserLogin_FullMethodName           = "/pb.UserService/UserLogin"
	UserService_UserSignup_FullMethodName          = "/pb.UserService/UserSignup"
	UserService_UserProfile_FullMethodName         = "/pb.UserService/UserProfile"
	UserService_UserProfileUpdate_FullMethodName   = "/pb.UserService/UserProfileUpdate"
	UserService_UserFetchBookByID_FullMethodName   = "/pb.UserService/UserFetchBookByID"
	UserService_UserFetchBookByName_FullMethodName = "/pb.UserService/UserFetchBookByName"
	UserService_USerFetchAllBooks_FullMethodName   = "/pb.UserService/USerFetchAllBooks"
	UserService_EditUser_FullMethodName            = "/pb.UserService/EditUser"
	UserService_FindAllUsers_FullMethodName        = "/pb.UserService/FindAllUsers"
	UserService_DeleteUser_FullMethodName          = "/pb.UserService/DeleteUser"
	UserService_FindUserByID_FullMethodName        = "/pb.UserService/FindUserByID"
	UserService_FindUserByEmail_FullMethodName     = "/pb.UserService/FindUserByEmail"
	UserService_CreateMembership_FullMethodName    = "/pb.UserService/CreateMembership"
	UserService_FindMembershipByID_FullMethodName  = "/pb.UserService/FindMembershipByID"
	UserService_UpdateMembeship_FullMethodName     = "/pb.UserService/UpdateMembeship"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	UserSignup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	UserProfile(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Profile, error)
	UserProfileUpdate(ctx context.Context, in *ProfileUpdate, opts ...grpc.CallOption) (*Profile, error)
	UserFetchBookByID(ctx context.Context, in *UBookID, opts ...grpc.CallOption) (*UBookModel, error)
	UserFetchBookByName(ctx context.Context, in *UBookName, opts ...grpc.CallOption) (*UBookModel, error)
	USerFetchAllBooks(ctx context.Context, in *UNoParam, opts ...grpc.CallOption) (*UBookList, error)
	EditUser(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	FindAllUsers(ctx context.Context, in *UNoParam, opts ...grpc.CallOption) (*Users, error)
	DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*CommonResponse, error)
	FindUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Profile, error)
	FindUserByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Profile, error)
	CreateMembership(ctx context.Context, in *Membership, opts ...grpc.CallOption) (*CommonResponse, error)
	FindMembershipByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Membership, error)
	UpdateMembeship(ctx context.Context, in *Membership, opts ...grpc.CallOption) (*CommonResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserSignup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_UserSignup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserProfile(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, UserService_UserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserProfileUpdate(ctx context.Context, in *ProfileUpdate, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, UserService_UserProfileUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserFetchBookByID(ctx context.Context, in *UBookID, opts ...grpc.CallOption) (*UBookModel, error) {
	out := new(UBookModel)
	err := c.cc.Invoke(ctx, UserService_UserFetchBookByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserFetchBookByName(ctx context.Context, in *UBookName, opts ...grpc.CallOption) (*UBookModel, error) {
	out := new(UBookModel)
	err := c.cc.Invoke(ctx, UserService_UserFetchBookByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) USerFetchAllBooks(ctx context.Context, in *UNoParam, opts ...grpc.CallOption) (*UBookList, error) {
	out := new(UBookList)
	err := c.cc.Invoke(ctx, UserService_USerFetchAllBooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EditUser(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_EditUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindAllUsers(ctx context.Context, in *UNoParam, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, UserService_FindAllUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, UserService_FindUserByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindUserByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, UserService_FindUserByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateMembership(ctx context.Context, in *Membership, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_CreateMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindMembershipByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := c.cc.Invoke(ctx, UserService_FindMembershipByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateMembeship(ctx context.Context, in *Membership, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateMembeship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	UserLogin(context.Context, *LoginRequest) (*CommonResponse, error)
	UserSignup(context.Context, *SignupRequest) (*CommonResponse, error)
	UserProfile(context.Context, *UserID) (*Profile, error)
	UserProfileUpdate(context.Context, *ProfileUpdate) (*Profile, error)
	UserFetchBookByID(context.Context, *UBookID) (*UBookModel, error)
	UserFetchBookByName(context.Context, *UBookName) (*UBookModel, error)
	USerFetchAllBooks(context.Context, *UNoParam) (*UBookList, error)
	EditUser(context.Context, *SignupRequest) (*CommonResponse, error)
	FindAllUsers(context.Context, *UNoParam) (*Users, error)
	DeleteUser(context.Context, *UserID) (*CommonResponse, error)
	FindUserByID(context.Context, *UserID) (*Profile, error)
	FindUserByEmail(context.Context, *Email) (*Profile, error)
	CreateMembership(context.Context, *Membership) (*CommonResponse, error)
	FindMembershipByID(context.Context, *UserID) (*Membership, error)
	UpdateMembeship(context.Context, *Membership) (*CommonResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) UserLogin(context.Context, *LoginRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServiceServer) UserSignup(context.Context, *SignupRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignup not implemented")
}
func (UnimplementedUserServiceServer) UserProfile(context.Context, *UserID) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfile not implemented")
}
func (UnimplementedUserServiceServer) UserProfileUpdate(context.Context, *ProfileUpdate) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfileUpdate not implemented")
}
func (UnimplementedUserServiceServer) UserFetchBookByID(context.Context, *UBookID) (*UBookModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFetchBookByID not implemented")
}
func (UnimplementedUserServiceServer) UserFetchBookByName(context.Context, *UBookName) (*UBookModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFetchBookByName not implemented")
}
func (UnimplementedUserServiceServer) USerFetchAllBooks(context.Context, *UNoParam) (*UBookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method USerFetchAllBooks not implemented")
}
func (UnimplementedUserServiceServer) EditUser(context.Context, *SignupRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUser not implemented")
}
func (UnimplementedUserServiceServer) FindAllUsers(context.Context, *UNoParam) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllUsers not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *UserID) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) FindUserByID(context.Context, *UserID) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByID not implemented")
}
func (UnimplementedUserServiceServer) FindUserByEmail(context.Context, *Email) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByEmail not implemented")
}
func (UnimplementedUserServiceServer) CreateMembership(context.Context, *Membership) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMembership not implemented")
}
func (UnimplementedUserServiceServer) FindMembershipByID(context.Context, *UserID) (*Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMembershipByID not implemented")
}
func (UnimplementedUserServiceServer) UpdateMembeship(context.Context, *Membership) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembeship not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserSignup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserProfile(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserProfileUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserProfileUpdate(ctx, req.(*ProfileUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserFetchBookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UBookID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserFetchBookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserFetchBookByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserFetchBookByID(ctx, req.(*UBookID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserFetchBookByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UBookName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserFetchBookByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserFetchBookByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserFetchBookByName(ctx, req.(*UBookName))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_USerFetchAllBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UNoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).USerFetchAllBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_USerFetchAllBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).USerFetchAllBooks(ctx, req.(*UNoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_EditUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EditUser(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UNoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindAllUsers(ctx, req.(*UNoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindUserByID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindUserByEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Membership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateMembership(ctx, req.(*Membership))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindMembershipByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindMembershipByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindMembershipByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindMembershipByID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateMembeship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Membership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateMembeship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateMembeship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateMembeship(ctx, req.(*Membership))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _UserService_UserLogin_Handler,
		},
		{
			MethodName: "UserSignup",
			Handler:    _UserService_UserSignup_Handler,
		},
		{
			MethodName: "UserProfile",
			Handler:    _UserService_UserProfile_Handler,
		},
		{
			MethodName: "UserProfileUpdate",
			Handler:    _UserService_UserProfileUpdate_Handler,
		},
		{
			MethodName: "UserFetchBookByID",
			Handler:    _UserService_UserFetchBookByID_Handler,
		},
		{
			MethodName: "UserFetchBookByName",
			Handler:    _UserService_UserFetchBookByName_Handler,
		},
		{
			MethodName: "USerFetchAllBooks",
			Handler:    _UserService_USerFetchAllBooks_Handler,
		},
		{
			MethodName: "EditUser",
			Handler:    _UserService_EditUser_Handler,
		},
		{
			MethodName: "FindAllUsers",
			Handler:    _UserService_FindAllUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "FindUserByID",
			Handler:    _UserService_FindUserByID_Handler,
		},
		{
			MethodName: "FindUserByEmail",
			Handler:    _UserService_FindUserByEmail_Handler,
		},
		{
			MethodName: "CreateMembership",
			Handler:    _UserService_CreateMembership_Handler,
		},
		{
			MethodName: "FindMembershipByID",
			Handler:    _UserService_FindMembershipByID_Handler,
		},
		{
			MethodName: "UpdateMembeship",
			Handler:    _UserService_UpdateMembeship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
