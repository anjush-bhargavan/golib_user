// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: book.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BookServices_FetchBookByID_FullMethodName   = "/pb.BookServices/FetchBookByID"
	BookServices_FetchBookByName_FullMethodName = "/pb.BookServices/FetchBookByName"
	BookServices_FetchAllBooks_FullMethodName   = "/pb.BookServices/FetchAllBooks"
)

// BookServicesClient is the client API for BookServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServicesClient interface {
	FetchBookByID(ctx context.Context, in *BookID, opts ...grpc.CallOption) (*BookModel, error)
	FetchBookByName(ctx context.Context, in *BookName, opts ...grpc.CallOption) (*BookModel, error)
	FetchAllBooks(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*BookList, error)
}

type bookServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServicesClient(cc grpc.ClientConnInterface) BookServicesClient {
	return &bookServicesClient{cc}
}

func (c *bookServicesClient) FetchBookByID(ctx context.Context, in *BookID, opts ...grpc.CallOption) (*BookModel, error) {
	out := new(BookModel)
	err := c.cc.Invoke(ctx, BookServices_FetchBookByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServicesClient) FetchBookByName(ctx context.Context, in *BookName, opts ...grpc.CallOption) (*BookModel, error) {
	out := new(BookModel)
	err := c.cc.Invoke(ctx, BookServices_FetchBookByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServicesClient) FetchAllBooks(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*BookList, error) {
	out := new(BookList)
	err := c.cc.Invoke(ctx, BookServices_FetchAllBooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServicesServer is the server API for BookServices service.
// All implementations must embed UnimplementedBookServicesServer
// for forward compatibility
type BookServicesServer interface {
	FetchBookByID(context.Context, *BookID) (*BookModel, error)
	FetchBookByName(context.Context, *BookName) (*BookModel, error)
	FetchAllBooks(context.Context, *NoParam) (*BookList, error)
	mustEmbedUnimplementedBookServicesServer()
}

// UnimplementedBookServicesServer must be embedded to have forward compatible implementations.
type UnimplementedBookServicesServer struct {
}

func (UnimplementedBookServicesServer) FetchBookByID(context.Context, *BookID) (*BookModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBookByID not implemented")
}
func (UnimplementedBookServicesServer) FetchBookByName(context.Context, *BookName) (*BookModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBookByName not implemented")
}
func (UnimplementedBookServicesServer) FetchAllBooks(context.Context, *NoParam) (*BookList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllBooks not implemented")
}
func (UnimplementedBookServicesServer) mustEmbedUnimplementedBookServicesServer() {}

// UnsafeBookServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServicesServer will
// result in compilation errors.
type UnsafeBookServicesServer interface {
	mustEmbedUnimplementedBookServicesServer()
}

func RegisterBookServicesServer(s grpc.ServiceRegistrar, srv BookServicesServer) {
	s.RegisterService(&BookServices_ServiceDesc, srv)
}

func _BookServices_FetchBookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServicesServer).FetchBookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookServices_FetchBookByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServicesServer).FetchBookByID(ctx, req.(*BookID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookServices_FetchBookByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServicesServer).FetchBookByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookServices_FetchBookByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServicesServer).FetchBookByName(ctx, req.(*BookName))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookServices_FetchAllBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServicesServer).FetchAllBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookServices_FetchAllBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServicesServer).FetchAllBooks(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

// BookServices_ServiceDesc is the grpc.ServiceDesc for BookServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BookServices",
	HandlerType: (*BookServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchBookByID",
			Handler:    _BookServices_FetchBookByID_Handler,
		},
		{
			MethodName: "FetchBookByName",
			Handler:    _BookServices_FetchBookByName_Handler,
		},
		{
			MethodName: "FetchAllBooks",
			Handler:    _BookServices_FetchAllBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book.proto",
}
